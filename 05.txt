#include <iostream> 
using namespace std; 
int main() { 
    // Prompt user for the number of processes and resources 
    int n, m;  
    cout << "Enter the number of processes: "; 
    cin >> n; 
    cout << "Enter the number of resources: "; 
    cin >> m; 
    // Initialize arrays for allocation, maximum, and available resources 
    int alloc[n][m], max[n][m], avail[m]; 
    // User input for allocation matrix 
    cout << "Enter the allocation matrix:" << endl; 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            cin >> alloc[i][j]; 
        } 
    } 

    // User input for maximum matrix 
    cout << "Enter the maximum matrix:" << endl; 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            cin >> max[i][j]; 
        } 
    } 

    // User input for available resources 
    cout << "Enter the available resources:" << endl; 
    for (int i = 0; i < m; i++) { 
        cin >> avail[i]; 
    } 

    // Initialize arrays for tracking finished processes and the safe sequence 
    int f[n], ans[n], ind = 0; 
    for (int k = 0; k < n; k++) { 
        f[k] = 0; // Mark all processes as not finished 
    } 

    // Calculate the need matrix by subtracting allocation from maximum 
    int need[n][m]; 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) 
            need[i][j] = max[i][j] - alloc[i][j]; 
    } 

    // Main loop to find a safe sequence 
    int y = 0; 
    for (int k = 0; k < n; k++) { 
        for (int i = 0; i < n; i++) { 
            if (f[i] == 0) { 

 // If process i is not finished 
                int flag = 0; 
                for (int j = 0; j < m; j++) { 
                    if (need[i][j] > avail[j]) {  

         // If process i needs more than available 
                        flag = 1; 
                        break; 
                    } 
                } 

                if (flag == 0) { 

      // If process i can be allocated resources 
                    ans[ind++] = i; // Add process i to the safe sequence 
                    for (y = 0; y < m; y++) 
                        avail[y] += alloc[i][y]; // Update available resources 
                    f[i] = 1; // Mark process i as finished 
                } 
            } 
        } 
    } 

    // Check if all processes are finished (safe sequence found) 
    int flag = 1; 
    for (int i = 0; i < n; i++) { 
        if (f[i] == 0) {  
            // If any process is not finished  
            flag = 0; 
            cout << "The given sequence is not safe" << endl;  
            break; 
        } 
    } 
    // Output the safe sequence if found 
    if (flag == 1) { 
        cout << "Following is the SAFE Sequence" << endl; 
        for (int i = 0; i < n - 1; i++) 
            cout << " P" << ans[i] << " ->"; 
        cout << " P" << ans[n - 1] << endl; 
    } 

    return 0; 
}


inputs are : 5
		      4

0 0 1 2 
1 0 0 0 
1 3 5 4 
0 6 3 2 
0 0 1 4 

0 0 1 2
1 7 5 0 
2 3 5 6 
0 6 5 2
0 6 5 6

1 5 2 0