#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <cstdlib>

using namespace std;

void performSystemCalls() {
    pid_t pid = fork();

    if (pid == 0) {
        cout << "It is the child process and pid is " << getpid() << endl;

        // execl("/bin/ls", "ls", "-l", "/home/ubuntu/", (char *) 0);
        execl("/bin/echo", "echo", "Hello from the child process!", (char *)0);

        perror("In exec(): ");
        exit(EXIT_FAILURE);
    } else if (pid > 0) {
        cout << "It is the parent process and pid is " << getpid() << endl;

        int status;
        wait(&status);
        cout << "Child is reaped " << status << endl;

        if (WIFEXITED(status)) {
            cout << "The process ended with exit(" << WEXITSTATUS(status) << ")." << endl;
        }

        if (WIFSIGNALED(status)) {
            cout << "The process ended with kill -" << WTERMSIG (status) << "." << endl;
        }
    } else {
        cout << "Error while forking" << endl;
        exit(EXIT_FAILURE);
    }

    exit(0);
}

int main() {
    performSystemCalls();
    return 0;
}



command:

ls : file listing
touch : creating file
cat : displaying content
cp : copying file
mv : moving file or renaming 
rm : deleting file
